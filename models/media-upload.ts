/* tslint:disable */
/* eslint-disable */
/**
 * Betaface API 2.0
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { NewFace } from './new-face';
/**
 * represents a media file upload message json body parameters.
 * @export
 * @interface MediaUpload
 */
export interface MediaUpload {
    /**
     * your API key or d45fd466-51e2-4701-8da8-04351c872236
     * @type {string}
     * @memberof MediaUpload
     */
    apiKey: string;
    /**
     * publicly accessible media file uri.
     * @type {string}
     * @memberof MediaUpload
     */
    fileUri?: string;
    /**
     * base64 encoded media file content. file_uri parameter will be ignored if file_base64 parameter is specified and not empty.
     * @type {string}
     * @memberof MediaUpload
     */
    fileBase64?: string;
    /**
     * (optional) comma separated list of detection flags: bestface - return only face with highest detection score, centerface - same as bestface but gives preference to face closest to image center, basicpoints - 22 basic points detection, propoints - 101 pro points detection, classifiers - face classification and attributes, extended - extended color and geometric measurements, content - image content detection.  for example: \"basicpoints,propoints,classifiers,content\"
     * @type {string}
     * @memberof MediaUpload
     */
    detectionFlags?: string;
    /**
     * (optional) filter faces with detection score lower than min_score.
     * @type {number}
     * @memberof MediaUpload
     */
    detectionMinScore?: number;
    /**
     * (optional) override automatic faces detection and manually specify faces locations, face points and person ids to assign.  provide an array of new faces
     * @type {Array<NewFace>}
     * @memberof MediaUpload
     */
    detectionNewFaces?: Array<NewFace>;
    /**
     * (optional) set person id in format name@namespace to each detected face. recommended to use with detection_flags bestface, centerface and/or min_score minimum detection score parameter.
     * @type {string}
     * @memberof MediaUpload
     */
    setPersonId?: string;
    /**
     * (optional) for each detected face run recognize against specified targets (face ids, person ids or namespaces).
     * @type {Array<string>}
     * @memberof MediaUpload
     */
    recognizeTargets?: Array<string>;
    /**
     * (optional) comma separated list of recognition parameters, currently supported min_match_score (minimum recognition score), min_score (minimum detection score), gender and race filter.  for example: \"min_match_score:0.4,min_score:0.2,gender:male,race:white\"
     * @type {string}
     * @memberof MediaUpload
     */
    recognizeParameters?: string;
    /**
     * (optional) original media filename, path, uri or your application specific id that you want to be stored in media metadata for reference.
     * @type {string}
     * @memberof MediaUpload
     */
    originalFilename?: string;
}
