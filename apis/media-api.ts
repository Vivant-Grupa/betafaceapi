/* tslint:disable */
/* eslint-disable */
/**
 * Betaface API 2.0
 * Betaface face recognition API.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Media } from '../models';
import { MediaUpload } from '../models';
import { MediaUploadResponse } from '../models';
/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary upload media file using multipart/form-data
         * @param {string} apiKey 
         * @param {Blob} file 
         * @param {string} detectionFlags 
         * @param {number} detectionMinScore 
         * @param {string} detectionNewFaces 
         * @param {string} setPersonId 
         * @param {string} recognizeTargets 
         * @param {string} recognizeParameters 
         * @param {string} originalFilename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2MediaFilePostForm: async (apiKey: string, file: Blob, detectionFlags: string, detectionMinScore: number, detectionNewFaces: string, setPersonId: string, recognizeTargets: string, recognizeParameters: string, originalFilename: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling v2MediaFilePostForm.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new RequiredError('file','Required parameter file was null or undefined when calling v2MediaFilePostForm.');
            }
            // verify required parameter 'detectionFlags' is not null or undefined
            if (detectionFlags === null || detectionFlags === undefined) {
                throw new RequiredError('detectionFlags','Required parameter detectionFlags was null or undefined when calling v2MediaFilePostForm.');
            }
            // verify required parameter 'detectionMinScore' is not null or undefined
            if (detectionMinScore === null || detectionMinScore === undefined) {
                throw new RequiredError('detectionMinScore','Required parameter detectionMinScore was null or undefined when calling v2MediaFilePostForm.');
            }
            // verify required parameter 'detectionNewFaces' is not null or undefined
            if (detectionNewFaces === null || detectionNewFaces === undefined) {
                throw new RequiredError('detectionNewFaces','Required parameter detectionNewFaces was null or undefined when calling v2MediaFilePostForm.');
            }
            // verify required parameter 'setPersonId' is not null or undefined
            if (setPersonId === null || setPersonId === undefined) {
                throw new RequiredError('setPersonId','Required parameter setPersonId was null or undefined when calling v2MediaFilePostForm.');
            }
            // verify required parameter 'recognizeTargets' is not null or undefined
            if (recognizeTargets === null || recognizeTargets === undefined) {
                throw new RequiredError('recognizeTargets','Required parameter recognizeTargets was null or undefined when calling v2MediaFilePostForm.');
            }
            // verify required parameter 'recognizeParameters' is not null or undefined
            if (recognizeParameters === null || recognizeParameters === undefined) {
                throw new RequiredError('recognizeParameters','Required parameter recognizeParameters was null or undefined when calling v2MediaFilePostForm.');
            }
            // verify required parameter 'originalFilename' is not null or undefined
            if (originalFilename === null || originalFilename === undefined) {
                throw new RequiredError('originalFilename','Required parameter originalFilename was null or undefined when calling v2MediaFilePostForm.');
            }
            const localVarPath = `/v2/media/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (apiKey !== undefined) { 
                localVarFormParams.append('api_key', apiKey as any);
            }

            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }

            if (detectionFlags !== undefined) { 
                localVarFormParams.append('detection_flags', detectionFlags as any);
            }

            if (detectionMinScore !== undefined) { 
                localVarFormParams.append('detection_min_score', detectionMinScore as any);
            }

            if (detectionNewFaces !== undefined) { 
                localVarFormParams.append('detection_new_faces', detectionNewFaces as any);
            }

            if (setPersonId !== undefined) { 
                localVarFormParams.append('set_person_id', setPersonId as any);
            }

            if (recognizeTargets !== undefined) { 
                localVarFormParams.append('recognize_targets', recognizeTargets as any);
            }

            if (recognizeParameters !== undefined) { 
                localVarFormParams.append('recognize_parameters', recognizeParameters as any);
            }

            if (originalFilename !== undefined) { 
                localVarFormParams.append('original_filename', originalFilename as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary gets a media information.
         * @param {string} apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236
         * @param {string} mediaUuid the requested media identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2MediaGet: async (apiKey: string, mediaUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling v2MediaGet.');
            }
            // verify required parameter 'mediaUuid' is not null or undefined
            if (mediaUuid === null || mediaUuid === undefined) {
                throw new RequiredError('mediaUuid','Required parameter mediaUuid was null or undefined when calling v2MediaGet.');
            }
            const localVarPath = `/v2/media`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (mediaUuid !== undefined) {
                localVarQueryParameter['media_uuid'] = mediaUuid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary gets a media information using SHA256 hash of media file.
         * @param {string} apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236
         * @param {string} checksum SHA256 media file hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2MediaHashGet: async (apiKey: string, checksum: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling v2MediaHashGet.');
            }
            // verify required parameter 'checksum' is not null or undefined
            if (checksum === null || checksum === undefined) {
                throw new RequiredError('checksum','Required parameter checksum was null or undefined when calling v2MediaHashGet.');
            }
            const localVarPath = `/v2/media/hash`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (checksum !== undefined) {
                localVarQueryParameter['checksum'] = checksum;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary upload media file using file uri or file content as base64 encoded string
         * @param {MediaUpload} [body] request json body with parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2MediaPost: async (body?: MediaUpload, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/media`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary upload media file using multipart/form-data
         * @param {string} apiKey 
         * @param {Blob} file 
         * @param {string} detectionFlags 
         * @param {number} detectionMinScore 
         * @param {string} detectionNewFaces 
         * @param {string} setPersonId 
         * @param {string} recognizeTargets 
         * @param {string} recognizeParameters 
         * @param {string} originalFilename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MediaFilePostForm(apiKey: string, file: Blob, detectionFlags: string, detectionMinScore: number, detectionNewFaces: string, setPersonId: string, recognizeTargets: string, recognizeParameters: string, originalFilename: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MediaUploadResponse>>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).v2MediaFilePostForm(apiKey, file, detectionFlags, detectionMinScore, detectionNewFaces, setPersonId, recognizeTargets, recognizeParameters, originalFilename, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary gets a media information.
         * @param {string} apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236
         * @param {string} mediaUuid the requested media identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MediaGet(apiKey: string, mediaUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Media>>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).v2MediaGet(apiKey, mediaUuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary gets a media information using SHA256 hash of media file.
         * @param {string} apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236
         * @param {string} checksum SHA256 media file hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MediaHashGet(apiKey: string, checksum: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Media>>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).v2MediaHashGet(apiKey, checksum, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary upload media file using file uri or file content as base64 encoded string
         * @param {MediaUpload} [body] request json body with parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MediaPost(body?: MediaUpload, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MediaUploadResponse>>> {
            const localVarAxiosArgs = await MediaApiAxiosParamCreator(configuration).v2MediaPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary upload media file using multipart/form-data
         * @param {string} apiKey 
         * @param {Blob} file 
         * @param {string} detectionFlags 
         * @param {number} detectionMinScore 
         * @param {string} detectionNewFaces 
         * @param {string} setPersonId 
         * @param {string} recognizeTargets 
         * @param {string} recognizeParameters 
         * @param {string} originalFilename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MediaFilePostForm(apiKey: string, file: Blob, detectionFlags: string, detectionMinScore: number, detectionNewFaces: string, setPersonId: string, recognizeTargets: string, recognizeParameters: string, originalFilename: string, options?: AxiosRequestConfig): Promise<AxiosResponse<MediaUploadResponse>> {
            return MediaApiFp(configuration).v2MediaFilePostForm(apiKey, file, detectionFlags, detectionMinScore, detectionNewFaces, setPersonId, recognizeTargets, recognizeParameters, originalFilename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary gets a media information.
         * @param {string} apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236
         * @param {string} mediaUuid the requested media identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MediaGet(apiKey: string, mediaUuid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Media>> {
            return MediaApiFp(configuration).v2MediaGet(apiKey, mediaUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary gets a media information using SHA256 hash of media file.
         * @param {string} apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236
         * @param {string} checksum SHA256 media file hash.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MediaHashGet(apiKey: string, checksum: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Media>> {
            return MediaApiFp(configuration).v2MediaHashGet(apiKey, checksum, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary upload media file using file uri or file content as base64 encoded string
         * @param {MediaUpload} [body] request json body with parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2MediaPost(body?: MediaUpload, options?: AxiosRequestConfig): Promise<AxiosResponse<MediaUploadResponse>> {
            return MediaApiFp(configuration).v2MediaPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * 
     * @summary upload media file using multipart/form-data
     * @param {string} apiKey 
     * @param {Blob} file 
     * @param {string} detectionFlags 
     * @param {number} detectionMinScore 
     * @param {string} detectionNewFaces 
     * @param {string} setPersonId 
     * @param {string} recognizeTargets 
     * @param {string} recognizeParameters 
     * @param {string} originalFilename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public async v2MediaFilePostForm(apiKey: string, file: Blob, detectionFlags: string, detectionMinScore: number, detectionNewFaces: string, setPersonId: string, recognizeTargets: string, recognizeParameters: string, originalFilename: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<MediaUploadResponse>> {
        return MediaApiFp(this.configuration).v2MediaFilePostForm(apiKey, file, detectionFlags, detectionMinScore, detectionNewFaces, setPersonId, recognizeTargets, recognizeParameters, originalFilename, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary gets a media information.
     * @param {string} apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236
     * @param {string} mediaUuid the requested media identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public async v2MediaGet(apiKey: string, mediaUuid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Media>> {
        return MediaApiFp(this.configuration).v2MediaGet(apiKey, mediaUuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary gets a media information using SHA256 hash of media file.
     * @param {string} apiKey your API key or d45fd466-51e2-4701-8da8-04351c872236
     * @param {string} checksum SHA256 media file hash.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public async v2MediaHashGet(apiKey: string, checksum: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Media>> {
        return MediaApiFp(this.configuration).v2MediaHashGet(apiKey, checksum, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary upload media file using file uri or file content as base64 encoded string
     * @param {MediaUpload} [body] request json body with parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public async v2MediaPost(body?: MediaUpload, options?: AxiosRequestConfig) : Promise<AxiosResponse<MediaUploadResponse>> {
        return MediaApiFp(this.configuration).v2MediaPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
